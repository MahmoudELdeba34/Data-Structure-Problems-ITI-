#include <iostream>
using namespace std;

// Node structure for the stack
struct Node {
    int data;
    Node* next;

    Node(int value) : data(value), next(nullptr) {}
};

// Stack class
class Stack {
private:
    Node* top; // Pointer to the top of the stack

public:
    Stack() : top(nullptr) {} // Constructor to initialize the stack

    // Push operation
    void push(int value) {
        Node* newNode = new Node(value);
        if (top == nullptr) { // If stack is empty
            top = newNode;
        } else {
            newNode->next = top;
            top = newNode;
        }
        cout << value << " pushed onto the stack." << endl;
    }

    // Pop operation
    void pop() {
        if (top == nullptr) { // If stack is empty
            cout << "Stack is empty. Cannot perform pop operation." << endl;
            return;
        }
        Node* temp = top;
        top = top->next;
        cout << temp->data << " popped from the stack." << endl;
        delete temp; // Free memory
    }

    // Peek operation
    int peek() {
        if (top == nullptr) { // If stack is empty
            cout << "Stack is empty." << endl;
            return -1; // Return -1 as an error value
        }
        return top->data;
    }

    // Check if stack is empty
    bool isEmpty() {
        return top == nullptr;
    }

    // Print the stack
    void printStack() {
        if (top == nullptr) {
            cout << "Stack is empty." << endl;
            return;
        }
        Node* temp = top;
        cout << "Stack elements: ";
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

// Main program
int main() {
    Stack stack;

    int choice, value;
    while (true) {
        cout << "\nChoose an operation:\n";
        cout << "1. Push\n";
        cout << "2. Pop\n";
        cout << "3. Peek\n";
        cout << "4. Check if stack is empty\n";
        cout << "5. Print stack\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to push: ";
                cin >> value;
                stack.push(value);
                break;
            case 2:
                stack.pop();
                break;
            case 3:
                cout << "Top element is: " << stack.peek() << endl;
                break;
            case 4:
                if (stack.isEmpty()) {
                    cout << "Stack is empty." << endl;
                } else {
                    cout << "Stack is not empty." << endl;
                }
                break;
            case 5:
                stack.printStack();
                break;
            case 6:
                cout << "Exiting the program." << endl;
                return 0;
            default:
                cout << "Invalid choice! Please try again." << endl;
        }
    }

    return 0;
}