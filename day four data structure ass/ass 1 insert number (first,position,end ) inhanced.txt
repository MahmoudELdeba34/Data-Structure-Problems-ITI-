#include <iostream>
using namespace std;

// Node structure definition
struct Node {
    int data;
    Node* next;
    Node* prev;

    Node(int value) : data(value), next(nullptr), prev(nullptr) {}
};

// Head and Tail pointers
Node* head = nullptr;
Node* tail = nullptr;

// Insert at the beginning
void insertAtBeginning(int data) {
    Node* newNode = new Node(data);
    if (head == nullptr) { // If the list is empty
        head = tail = newNode;
    } else {
        newNode->next = head;
        head->prev = newNode;
        head = newNode;
    }
}

// Insert at the end
void insertAtEnd(int data) {
    Node* newNode = new Node(data);
    if (tail == nullptr) { // If the list is empty
        head = tail = newNode;
    } else {
        newNode->prev = tail;
        tail->next = newNode;
        tail = newNode;
    }
}

// Insert at a specific position
void insertAtPosition(int data, int position) {
    if (position == 0) { // Insert at the beginning
        insertAtBeginning(data);
        return;
    }

    Node* temp = head;
    for (int i = 0; i < position - 1 && temp != nullptr; i++) {
        temp = temp->next;
    }

    if (temp == nullptr) { // Invalid position
        cout << "Invalid position!" << endl;
        return;
    }

    Node* newNode = new Node(data);
    newNode->next = temp->next;
    newNode->prev = temp;

    if (temp->next != nullptr) { // If not inserting at the end
        temp->next->prev = newNode;
    } else {
        tail = newNode; // Update tail if inserted at the end
    }

    temp->next = newNode;
}

// Print the list
void printList() {
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

// Print the list in reverse
void printListReverse() {
    Node* temp = tail;
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->prev;
    }
    cout << endl;
}

// Main program
int main() {
    int choice, data, position;

    while (true) {
        cout << "\nChoose an operation: \n";
        cout << "1. Insert at the beginning\n";
        cout << "2. Insert at the end\n";
        cout << "3. Insert at a specific position\n";
        cout << "4. Print the list\n";
        cout << "5. Print the list in reverse\n";
        cout << "6. Exit the program\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter the value to insert at the beginning: ";
                cin >> data;
                insertAtBeginning(data);
                break;
            case 2:
                cout << "Enter the value to insert at the end: ";
                cin >> data;
                insertAtEnd(data);
                break;
            case 3:
                cout << "Enter the value to insert: ";
                cin >> data;
                cout << "Enter the position to insert at (starting from 0): ";
                cin >> position;
                insertAtPosition(data, position);
                break;
            case 4:
                cout << "List: ";
                printList();
                break;
            case 5:
                cout << "Reversed List: ";
                printListReverse();
                break;
            case 6:
                cout << "Exiting the program." << endl;
                return 0;
            default:
                cout << "Invalid choice! Please try again." << endl;
        }
    }

    return 0;
}